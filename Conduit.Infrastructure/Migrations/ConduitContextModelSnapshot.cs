// <auto-generated />
using System;
using Conduit.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Conduit.Infrastructure.Migrations
{
    [DbContext(typeof(ConduitContext))]
    partial class ConduitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Conduit.Domain.Entities.ChatGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreatorID");

                    b.ToTable("ChatGroups");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.ChatGroupMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<Guid>("ChatGroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("SenderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SourceMessageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ChatGroupID");

                    b.HasIndex("SenderID");

                    b.HasIndex("SourceMessageID");

                    b.ToTable("ChatGroupMessages");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.ChatGroupParticipant", b =>
                {
                    b.Property<Guid>("ChatGroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatGroupID", "ParticipantID");

                    b.HasIndex("ParticipantID");

                    b.ToTable("ChatGroupParticipants");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.ChatGroupRule", b =>
                {
                    b.Property<Guid>("ChatGroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rule")
                        .HasColumnType("int");

                    b.HasKey("ChatGroupID", "Rule");

                    b.ToTable("ChatGroupRules");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.LongLivedToken", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("LongLivedTokens");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SourceMessageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RecipientID");

                    b.HasIndex("SenderID");

                    b.HasIndex("SourceMessageID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.SignalRClient", b =>
                {
                    b.Property<string>("ConnectionID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConnectionID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("SignalRClients");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid?>("UserAccountID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivationToken")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ActivationTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("ResetTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.UserActivityLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Agent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserActivityLogs");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserID", "Role");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.ChatGroup", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.User", "Creator")
                        .WithMany("ChatGroups")
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.ChatGroupMessage", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.ChatGroup", "ChatGroup")
                        .WithMany()
                        .HasForeignKey("ChatGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conduit.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conduit.Domain.Entities.ChatGroupMessage", "SourceMessage")
                        .WithMany()
                        .HasForeignKey("SourceMessageID");

                    b.Navigation("ChatGroup");

                    b.Navigation("Sender");

                    b.Navigation("SourceMessage");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.ChatGroupParticipant", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.ChatGroup", "ChatGroup")
                        .WithMany("Participants")
                        .HasForeignKey("ChatGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conduit.Domain.Entities.User", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.ChatGroupRule", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.ChatGroup", "ChatGroup")
                        .WithMany("Rules")
                        .HasForeignKey("ChatGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatGroup");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.LongLivedToken", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.User", "User")
                        .WithMany("LongLivedTokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.Message", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conduit.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conduit.Domain.Entities.Message", "SourceMessage")
                        .WithMany()
                        .HasForeignKey("SourceMessageID");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");

                    b.Navigation("SourceMessage");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.SignalRClient", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.User", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountID");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.UserActivityLog", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Conduit.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.ChatGroup", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("Conduit.Domain.Entities.User", b =>
                {
                    b.Navigation("ChatGroups");

                    b.Navigation("LongLivedTokens");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
